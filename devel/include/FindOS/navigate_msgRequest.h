// Generated by gencpp from file FindOS/navigate_msgRequest.msg
// DO NOT EDIT!


#ifndef FINDOS_MESSAGE_NAVIGATE_MSGREQUEST_H
#define FINDOS_MESSAGE_NAVIGATE_MSGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace FindOS
{
template <class ContainerAllocator>
struct navigate_msgRequest_
{
  typedef navigate_msgRequest_<ContainerAllocator> Type;

  navigate_msgRequest_()
    : target()  {
    }
  navigate_msgRequest_(const ContainerAllocator& _alloc)
    : target(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_type;
  _target_type target;





  typedef boost::shared_ptr< ::FindOS::navigate_msgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::FindOS::navigate_msgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct navigate_msgRequest_

typedef ::FindOS::navigate_msgRequest_<std::allocator<void> > navigate_msgRequest;

typedef boost::shared_ptr< ::FindOS::navigate_msgRequest > navigate_msgRequestPtr;
typedef boost::shared_ptr< ::FindOS::navigate_msgRequest const> navigate_msgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::FindOS::navigate_msgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::FindOS::navigate_msgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::FindOS::navigate_msgRequest_<ContainerAllocator1> & lhs, const ::FindOS::navigate_msgRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target == rhs.target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::FindOS::navigate_msgRequest_<ContainerAllocator1> & lhs, const ::FindOS::navigate_msgRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace FindOS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::FindOS::navigate_msgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::FindOS::navigate_msgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::FindOS::navigate_msgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10e5cb524446adda5ea1765c6838590d";
  }

  static const char* value(const ::FindOS::navigate_msgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10e5cb524446addaULL;
  static const uint64_t static_value2 = 0x5ea1765c6838590dULL;
};

template<class ContainerAllocator>
struct DataType< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FindOS/navigate_msgRequest";
  }

  static const char* value(const ::FindOS::navigate_msgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string target  # 请求消息\n"
;
  }

  static const char* value(const ::FindOS::navigate_msgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navigate_msgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::FindOS::navigate_msgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::FindOS::navigate_msgRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINDOS_MESSAGE_NAVIGATE_MSGREQUEST_H
